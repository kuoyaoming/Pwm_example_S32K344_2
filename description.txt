1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers. It is not part of the production code deliverables.
    The application includes a Design Studio project, that uses predefined configurations for the Pwm driver and dependency modules (Mcu, Port, Mcl...).
    The example perform basic functionality of Pwm driver.
    1.1 The application software functionality
        - Mcu_Init, Mcu_InitClock, Mcu_SetMode
                Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
        - Port_Init
                Initialize the pins used by the application using the Port driver.
        - Mcl_Init
                Initialize the Flexio and Emios common.
        - Pwm_Init, Mcl_Emios_SetCounterBusPeriod, Pwm_SetDutyCycle
                Initialize the Pwm driver, change the period and duty cycle to control the led brightness and blink LED.
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K3X4EVB-T172 PCB 53148 RevX5 SCH RevB.
        2.1.2 Connections
            - PTA29(EMIOS_1_CH_12) will control the LED(RGBLED0_RED) with the edge aligned mode, control the led brightness and blink this Led.
            - PTB16(EMIOS_0_CH_4) will control the output with the center aligned mode.
        2.1.3 Debugger
            - The OpenSDA debugger must be connected to J40 JTAG Cortex Debug connector for S32K3X4EVB-T172 PCB 53148 RevX5 SCH RevB boards.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. 
        Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). 
        Clicking on any one of those will generate all the components. 
        Make the desired changes (if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:

        Configuration Name                  Description
        -------------------------------     -----------------------
        $(example)_debug_flash_PnE          Debug the flash configuration using PnE

        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.